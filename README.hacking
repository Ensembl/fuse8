Multiple Projects in one directory
==================================

This is work in progress, so the source organisation is a bit of a mess.
There are bits of three conceptually distinct projects in here.

whitebox: this is the stuff in utils/. It's a utility library of acucmulated
utilities for C, mainly wrapping glibc, which has been dumped into here.
whitebox has moved on a fair amount since they have, and ultimately this
stuff will go into a separate repository, and this be a dependency.

There are some pretty major screw-ups in here at the moment, particularly
around string handling, that will be sorted out asap by merging in new
whitebox code.

jpf: this is the stuff in jpf/. It's a parser/emitter for a simple
YAML-like syntax with an underlying JSON data model. It's designed to
fill that gap where JSON just isn't quite friendly enough for config and
log files, etc.

This is much further on than the whitebox stuff, and is almost ready to
go. It's awaiting whitebox to replace its existing use of strbuf_* and
a few further tweaks. The test suite is pretty comprehensive. It's parsed
using flex at the moment which, in retrospect, was a mistake. To handle \0
cleanly and to generally tidy up the scanner, a simple state-based DFA will
be implemented using the whitebox strp_* methods (not currently included in
this distro).

Everything else: fuse8 proper.

At the moment they're all built together with a single Makefile. Obviously
this will change when they are spun out. At the moment you will need flex,
but not in the long-run.

You will also find cruddy temporary .c's lying around for now, don't let
that worry you. They'll be cleared up.

FUSE8 Proper
============

Fuse8 is divided into two suites of plugins. Interfaces implement various
means by which requests come into the system. At the moment there is only
fuse. Sources represent answers to those questions. There are a few of
those. Everything else at the top level is just support for this.

Threading Model
===============

Systems like this really demand an event-driven model (per ngninx, etc).
We use libevent. Unfortunately, file-access is badly supported with an
event-model, and the FUSE interface doesn't really support a non-blocking
listener. Therefore, we also use pthreads. Interfaces can run in their
own thread and send data to syncif.c, which uses an inter-thread queue
to surface these in the main event thread. To allow multiple blocking
sources (eg for file access) a set of worker threads look at a request
pool and when their blocking requests are done, place the results into
another queue, to reappear in the main thread. This is managed by
syncsource.c The advantages of using a model like this are mainly around
correctness: outside the hairy syncsource/syncif code, there's no need to
worry about races or locks.

References
==========

To manage memory and other sources, which is taken seriously, a system
of references from whitebox is used, which are based on the model in
explicit reference-counting form Objective-C. Each reference contains two
numbers, of strong and weak links. When the strong count reaches zero, then
release is called, when weak is also zero, free is called. The idea is that
release essentially close down an object, removing its references, making
it nullary and empty, while keeping it active. This removes references
which might create cycles as this will involve releasing strong references
to other objects. As release is only called once, eventually this results
in a graph containing many nodes and no links. At this point free can be
safely called on each object without having to worry about dangling
pointers. See util/misc.c for the implementation.

The project has been valgrind-ed under load to ensure no leaks.

Main Objects
============

These are the ones in the root direcotry. They're all reference counted.

These first three essentially live for the whole lifetime of the server
at the moment.

interface: base type for all interfaces.

sourcelist: an ordered list of sources to be consulted for incoming
requests.

source: base type for all sources.

The following is the main per-request structure:

request: a request is a single request for data from an interface. It is
created at an interface and passed around until complete when it is freed.

Anatomy of a Request
====================

A request includes a range, based on the ranges type from whitebox. While
this is initially a single interval, sources can paritally satisfy requests
and also expand them, leading to a pretty arbitrary range as the requested
interval passes through the list of sources. sources expand ranges in order
that complete blocks are retrieved for the purposes of subsequent cacheing.
For example, a request of four bytes could be satisfied by an http request
but clearly cannot be efficiently cached without hassle. When a block is
retrieved, the source calls back to request with the data. request then
examines whether it satisfies all or part of the original request and, if
so, copies it to the right part of the reply buffer. When this is done, the
request callback is triggered into the interface. However, as each piece of
data is reported to request, it also keeps the entire respons in chunks,
which are linked to the request. Once the request is satisfied, the list
of sources is rerun for each chunk through write calls, allowing caches to
store the data, even if it was not originally requested when they saw it
(eg expanded by a later source).

When the writes reach the source which created a chunk this process ends.
This allows multiple levels of cache. If a block is found in a low-priority
cache, further down the chain, it gets into the high-priority cache on
retrieval. However the opposite is not the case, and caches don't see their
own reads as writes, and so are not polluted by them.

Metadata
========

Metadata is a pain in the backside. For now requests are synchronous and
served by a jpf loaded at startup. This isn't ideal. They're processed by
the meta.c source.

HTTP Requests
=============

HTTP requests are aggregated into a single connection if they appear within
a certain timeframe. A timer task clears away ancient connections.

Stats
=====

Stats are collected as a jpf structure which is serialised by running.c
(which is an embarassing rag-bag of unfactored outer-loop code).

JPF
===

JPF represents the JSON data model in a YAML-like syntax. YAML is a data
syntax which uses python-style indents for bracketing. Numbers (which are
distinct types from numbery-strings in JSON) have a leading + or -.
Otherwise they are treaded as strings. !true, !false, and !null represent
those JSON values. Keys are introduced with aligned key: values and arrays
by aligned -'s. !: and !- represent empty objects and arrays respectively.

See jps/SPEC.txt for the gory details.


